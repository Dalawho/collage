/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CCZooRenderInterface extends utils.Interface {
  functions: {
    "LAYER_NAMES(uint256)": FunctionFragment;
    "_getTokenSVG(uint256[5],uint256,bytes)": FunctionFragment;
    "addAnimal(string,bytes,uint256)": FunctionFragment;
    "allowedAddAnimal(string,bytes,uint256)": FunctionFragment;
    "artAllowed()": FunctionFragment;
    "cczoo()": FunctionFragment;
    "cczpayment()": FunctionFragment;
    "checkAnimal(string)": FunctionFragment;
    "currateAnimal(uint8,address)": FunctionFragment;
    "getAnimals()": FunctionFragment;
    "getLayerIndex(uint16,uint8)": FunctionFragment;
    "getTokenAnimal(uint256)": FunctionFragment;
    "getTokenSVGForBytes(bytes,uint256[5])": FunctionFragment;
    "getTokenSVGWithAnimal(uint256,string)": FunctionFragment;
    "getTokenTraits(uint256)": FunctionFragment;
    "getTraitNames()": FunctionFragment;
    "gfx()": FunctionFragment;
    "inflateLib()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAnimal(uint256,uint8)": FunctionFragment;
    "setArtAllowed(address)": FunctionFragment;
    "setCCZooMain(address)": FunctionFragment;
    "setGfx(address)": FunctionFragment;
    "setInflator(address)": FunctionFragment;
    "setPayment(address)": FunctionFragment;
    "setTrait(uint256,bytes,uint256,string[])": FunctionFragment;
    "splitNumber(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LAYER_NAMES"
      | "_getTokenSVG"
      | "addAnimal"
      | "allowedAddAnimal"
      | "artAllowed"
      | "cczoo"
      | "cczpayment"
      | "checkAnimal"
      | "currateAnimal"
      | "getAnimals"
      | "getLayerIndex"
      | "getTokenAnimal"
      | "getTokenSVGForBytes"
      | "getTokenSVGWithAnimal"
      | "getTokenTraits"
      | "getTraitNames"
      | "gfx"
      | "inflateLib"
      | "owner"
      | "renounceOwnership"
      | "setAnimal"
      | "setArtAllowed"
      | "setCCZooMain"
      | "setGfx"
      | "setInflator"
      | "setPayment"
      | "setTrait"
      | "splitNumber"
      | "tokenURI"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LAYER_NAMES",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTokenSVG",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addAnimal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddAnimal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "artAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cczoo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cczpayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAnimal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currateAnimal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLayerIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAnimal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSVGForBytes",
    values: [
      PromiseOrValue<BytesLike>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenSVGWithAnimal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTraits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitNames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gfx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflateLib",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnimal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArtAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCCZooMain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGfx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayment",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrait",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "LAYER_NAMES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTokenSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAnimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "artAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cczoo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cczpayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currateAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSVGForBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenSVGWithAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gfx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inflateLib", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAnimal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setArtAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCCZooMain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGfx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInflator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTrait", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "animalSet(uint256,uint256)": EventFragment;
    "animalSuggested(string,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "animalSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "animalSuggested"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface animalSetEventObject {
  tokenId: BigNumber;
  animalId: BigNumber;
}
export type animalSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  animalSetEventObject
>;

export type animalSetEventFilter = TypedEventFilter<animalSetEvent>;

export interface animalSuggestedEventObject {
  _name: string;
  _data: string;
  _by: string;
}
export type animalSuggestedEvent = TypedEvent<
  [string, string, string],
  animalSuggestedEventObject
>;

export type animalSuggestedEventFilter = TypedEventFilter<animalSuggestedEvent>;

export interface CCZooRender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CCZooRenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LAYER_NAMES(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getTokenSVG(
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      tokenId: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    addAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedAddAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    artAllowed(overrides?: CallOverrides): Promise<[string]>;

    cczoo(overrides?: CallOverrides): Promise<[string]>;

    cczpayment(overrides?: CallOverrides): Promise<[string]>;

    checkAnimal(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currateAnimal(
      _animalId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAnimals(
      overrides?: CallOverrides
    ): Promise<[string[][]] & { _animalList: string[][] }>;

    getLayerIndex(
      _dna: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenSVGForBytes(
      _animal: PromiseOrValue<BytesLike>,
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenSVGWithAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenTraits(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]] & {
        tokenTraits: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      }
    >;

    getTraitNames(
      overrides?: CallOverrides
    ): Promise<[string[][]] & { allTraits: string[][] }>;

    gfx(overrides?: CallOverrides): Promise<[string]>;

    inflateLib(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      animal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setArtAllowed(
      _newArtAllowed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCCZooMain(
      newCCZoo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayment(
      newPayment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrait(
      trait: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number, number, number]] & {
        numbers: [number, number, number, number, number];
      }
    >;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LAYER_NAMES(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _getTokenSVG(
    tokenTraits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    tokenId: PromiseOrValue<BigNumberish>,
    buffer: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  addAnimal(
    name: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    destLen: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedAddAnimal(
    name: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    destLen: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  artAllowed(overrides?: CallOverrides): Promise<string>;

  cczoo(overrides?: CallOverrides): Promise<string>;

  cczpayment(overrides?: CallOverrides): Promise<string>;

  checkAnimal(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currateAnimal(
    _animalId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAnimals(overrides?: CallOverrides): Promise<string[][]>;

  getLayerIndex(
    _dna: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAnimal(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenSVGForBytes(
    _animal: PromiseOrValue<BytesLike>,
    tokenTraits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenSVGWithAnimal(
    tokenId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenTraits(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTraitNames(overrides?: CallOverrides): Promise<string[][]>;

  gfx(overrides?: CallOverrides): Promise<string>;

  inflateLib(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnimal(
    tokenId: PromiseOrValue<BigNumberish>,
    animal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setArtAllowed(
    _newArtAllowed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCCZooMain(
    newCCZoo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGfx(
    newGfx: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInflator(
    newInflate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayment(
    newPayment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrait(
    trait: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    destLen: PromiseOrValue<BigNumberish>,
    names: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitNumber(
    _number: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number, number]>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LAYER_NAMES(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _getTokenSVG(
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      tokenId: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedAddAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    artAllowed(overrides?: CallOverrides): Promise<string>;

    cczoo(overrides?: CallOverrides): Promise<string>;

    cczpayment(overrides?: CallOverrides): Promise<string>;

    checkAnimal(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currateAnimal(
      _animalId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnimals(overrides?: CallOverrides): Promise<string[][]>;

    getLayerIndex(
      _dna: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenSVGForBytes(
      _animal: PromiseOrValue<BytesLike>,
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenSVGWithAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenTraits(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTraitNames(overrides?: CallOverrides): Promise<string[][]>;

    gfx(overrides?: CallOverrides): Promise<string>;

    inflateLib(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      animal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setArtAllowed(
      _newArtAllowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCCZooMain(
      newCCZoo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayment(
      newPayment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrait(
      trait: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    splitNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number, number]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "animalSet(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalId?: null
    ): animalSetEventFilter;
    animalSet(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      animalId?: null
    ): animalSetEventFilter;

    "animalSuggested(string,bytes,address)"(
      _name?: PromiseOrValue<string> | null,
      _data?: null,
      _by?: PromiseOrValue<string> | null
    ): animalSuggestedEventFilter;
    animalSuggested(
      _name?: PromiseOrValue<string> | null,
      _data?: null,
      _by?: PromiseOrValue<string> | null
    ): animalSuggestedEventFilter;
  };

  estimateGas: {
    LAYER_NAMES(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTokenSVG(
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      tokenId: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedAddAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    artAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    cczoo(overrides?: CallOverrides): Promise<BigNumber>;

    cczpayment(overrides?: CallOverrides): Promise<BigNumber>;

    checkAnimal(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currateAnimal(
      _animalId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAnimals(overrides?: CallOverrides): Promise<BigNumber>;

    getLayerIndex(
      _dna: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSVGForBytes(
      _animal: PromiseOrValue<BytesLike>,
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenSVGWithAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenTraits(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraitNames(overrides?: CallOverrides): Promise<BigNumber>;

    gfx(overrides?: CallOverrides): Promise<BigNumber>;

    inflateLib(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      animal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setArtAllowed(
      _newArtAllowed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCCZooMain(
      newCCZoo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayment(
      newPayment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrait(
      trait: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LAYER_NAMES(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTokenSVG(
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      tokenId: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedAddAnimal(
      name: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    artAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cczoo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cczpayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAnimal(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currateAnimal(
      _animalId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAnimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLayerIndex(
      _dna: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSVGForBytes(
      _animal: PromiseOrValue<BytesLike>,
      tokenTraits: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenSVGWithAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenTraits(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraitNames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gfx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflateLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnimal(
      tokenId: PromiseOrValue<BigNumberish>,
      animal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setArtAllowed(
      _newArtAllowed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCCZooMain(
      newCCZoo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayment(
      newPayment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrait(
      trait: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
