/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Render {
  export type LayerStructStruct = {
    layerId: PromiseOrValue<BigNumberish>;
    xOffset: PromiseOrValue<BigNumberish>;
    yOffset: PromiseOrValue<BigNumberish>;
  };

  export type LayerStructStructOutput = [number, number, number] & {
    layerId: number;
    xOffset: number;
    yOffset: number;
  };
}

export interface RenderInterface extends utils.Interface {
  functions: {
    "addToken(bytes,uint16,string)": FunctionFragment;
    "getSVGForBytes(bytes)": FunctionFragment;
    "gfx()": FunctionFragment;
    "inflateLib()": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "pieces()": FunctionFragment;
    "previewCollage(tuple[4],uint8,(uint8,uint8,uint8))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGfx(address)": FunctionFragment;
    "setInflator(address)": FunctionFragment;
    "setPieces(address)": FunctionFragment;
    "tokenURI(uint256,tuple[4])": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToken"
      | "getSVGForBytes"
      | "gfx"
      | "inflateLib"
      | "initialize"
      | "owner"
      | "pieces"
      | "previewCollage"
      | "renounceOwnership"
      | "setGfx"
      | "setInflator"
      | "setPieces"
      | "tokenURI(uint256,tuple[4])"
      | "tokenURI(uint256)"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSVGForBytes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "gfx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflateLib",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pieces", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewCollage",
    values: [
      [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      PromiseOrValue<BigNumberish>,
      Render.LayerStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGfx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPieces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI(uint256,tuple[4])",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSVGForBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gfx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inflateLib", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pieces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewCollage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGfx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInflator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPieces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenURI(uint256,tuple[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenURI(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Render extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToken(
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSVGForBytes(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gfx(overrides?: CallOverrides): Promise<[string]>;

    inflateLib(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pieces(overrides?: CallOverrides): Promise<[string]>;

    previewCollage(
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      layerNr: PromiseOrValue<BigNumberish>,
      newLayer: Render.LayerStructStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPieces(
      _newPieces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenURI(uint256,tuple[4])"(
      tokenId: PromiseOrValue<BigNumberish>,
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addToken(
    _data: PromiseOrValue<BytesLike>,
    destLen: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSVGForBytes(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  gfx(overrides?: CallOverrides): Promise<string>;

  inflateLib(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pieces(overrides?: CallOverrides): Promise<string>;

  previewCollage(
    layerIds: [
      Render.LayerStructStruct,
      Render.LayerStructStruct,
      Render.LayerStructStruct,
      Render.LayerStructStruct
    ],
    layerNr: PromiseOrValue<BigNumberish>,
    newLayer: Render.LayerStructStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGfx(
    newGfx: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInflator(
    newInflate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPieces(
    _newPieces: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenURI(uint256,tuple[4])"(
    tokenId: PromiseOrValue<BigNumberish>,
    layerIds: [
      Render.LayerStructStruct,
      Render.LayerStructStruct,
      Render.LayerStructStruct,
      Render.LayerStructStruct
    ],
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToken(
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSVGForBytes(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    gfx(overrides?: CallOverrides): Promise<string>;

    inflateLib(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pieces(overrides?: CallOverrides): Promise<string>;

    previewCollage(
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      layerNr: PromiseOrValue<BigNumberish>,
      newLayer: Render.LayerStructStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPieces(
      _newPieces: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenURI(uint256,tuple[4])"(
      tokenId: PromiseOrValue<BigNumberish>,
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToken(
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSVGForBytes(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gfx(overrides?: CallOverrides): Promise<BigNumber>;

    inflateLib(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pieces(overrides?: CallOverrides): Promise<BigNumber>;

    previewCollage(
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      layerNr: PromiseOrValue<BigNumberish>,
      newLayer: Render.LayerStructStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPieces(
      _newPieces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenURI(uint256,tuple[4])"(
      tokenId: PromiseOrValue<BigNumberish>,
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToken(
      _data: PromiseOrValue<BytesLike>,
      destLen: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSVGForBytes(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gfx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflateLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pieces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewCollage(
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      layerNr: PromiseOrValue<BigNumberish>,
      newLayer: Render.LayerStructStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGfx(
      newGfx: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInflator(
      newInflate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPieces(
      _newPieces: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256,tuple[4])"(
      tokenId: PromiseOrValue<BigNumberish>,
      layerIds: [
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct,
        Render.LayerStructStruct
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
