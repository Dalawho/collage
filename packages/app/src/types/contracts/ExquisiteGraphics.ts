/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IExquisiteGraphics {
  export type PaletteStruct = {
    colors: PromiseOrValue<BytesLike>[];
    paletteType: PromiseOrValue<BigNumberish>;
  };

  export type PaletteStructOutput = [string[], number] & {
    colors: string[];
    paletteType: number;
  };
}

export interface ExquisiteGraphicsInterface extends utils.Interface {
  functions: {
    "drawPixelsAnimal(bytes,(bytes3[],uint8))": FunctionFragment;
    "drawPixelsItems(bytes,uint8,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "drawPixelsAnimal" | "drawPixelsItems"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "drawPixelsAnimal",
    values: [PromiseOrValue<BytesLike>, IExquisiteGraphics.PaletteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "drawPixelsItems",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "drawPixelsAnimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawPixelsItems",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ExquisiteGraphics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExquisiteGraphicsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    drawPixelsAnimal(
      data: PromiseOrValue<BytesLike>,
      palette: IExquisiteGraphics.PaletteStruct,
      overrides?: CallOverrides
    ): Promise<
      [[[number, number], [number, number], [number, number]], string]
    >;

    drawPixelsItems(
      data: PromiseOrValue<BytesLike>,
      xOffset: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  drawPixelsAnimal(
    data: PromiseOrValue<BytesLike>,
    palette: IExquisiteGraphics.PaletteStruct,
    overrides?: CallOverrides
  ): Promise<[[[number, number], [number, number], [number, number]], string]>;

  drawPixelsItems(
    data: PromiseOrValue<BytesLike>,
    xOffset: PromiseOrValue<BigNumberish>,
    yOffset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    drawPixelsAnimal(
      data: PromiseOrValue<BytesLike>,
      palette: IExquisiteGraphics.PaletteStruct,
      overrides?: CallOverrides
    ): Promise<
      [[[number, number], [number, number], [number, number]], string]
    >;

    drawPixelsItems(
      data: PromiseOrValue<BytesLike>,
      xOffset: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    drawPixelsAnimal(
      data: PromiseOrValue<BytesLike>,
      palette: IExquisiteGraphics.PaletteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawPixelsItems(
      data: PromiseOrValue<BytesLike>,
      xOffset: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    drawPixelsAnimal(
      data: PromiseOrValue<BytesLike>,
      palette: IExquisiteGraphics.PaletteStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawPixelsItems(
      data: PromiseOrValue<BytesLike>,
      xOffset: PromiseOrValue<BigNumberish>,
      yOffset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
