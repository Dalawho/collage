// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ArtworkAdded extends ethereum.Event {
  get params(): ArtworkAdded__Params {
    return new ArtworkAdded__Params(this);
  }
}

export class ArtworkAdded__Params {
  _event: ArtworkAdded;

  constructor(event: ArtworkAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get layer(): ArtworkAddedLayerStruct {
    return changetype<ArtworkAddedLayerStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get collection(): string {
    return this._event.parameters[3].value.toString();
  }

  get category(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ArtworkAddedLayerStruct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get maxSupply(): i32 {
    return this[1].toI32();
  }

  get supplyMinted(): i32 {
    return this[2].toI32();
  }

  get royalties(): i32 {
    return this[3].toI32();
  }

  get maxPerWallet(): i32 {
    return this[4].toI32();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenBurned extends ethereum.Event {
  get params(): TokenBurned__Params {
    return new TokenBurned__Params(this);
  }
}

export class TokenBurned__Params {
  _event: TokenBurned;

  constructor(event: TokenBurned) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pieces__getLayerDataResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get maxSupply(): i32 {
    return this[1].toI32();
  }

  get supplyMinted(): i32 {
    return this[2].toI32();
  }

  get royalties(): i32 {
    return this[3].toI32();
  }

  get maxPerWallet(): i32 {
    return this[4].toI32();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }
}

export class Pieces__getLayerDataResult {
  value0: Pieces__getLayerDataResultValue0Struct;
  value1: Address;

  constructor(value0: Pieces__getLayerDataResultValue0Struct, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): Pieces__getLayerDataResultValue0Struct {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Pieces__layersResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getMaxSupply(): i32 {
    return this.value1;
  }

  getSupplyMinted(): i32 {
    return this.value2;
  }

  getRoyalties(): i32 {
    return this.value3;
  }

  getMaxPerWallet(): i32 {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }
}

export class Pieces__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class Pieces extends ethereum.SmartContract {
  static bind(address: Address): Pieces {
    return new Pieces("Pieces", address);
  }

  ADD_ARTWORK_PRICE(): BigInt {
    let result = super.call(
      "ADD_ARTWORK_PRICE",
      "ADD_ARTWORK_PRICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ADD_ARTWORK_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADD_ARTWORK_PRICE",
      "ADD_ARTWORK_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LAYERS(): BigInt {
    let result = super.call("MAX_LAYERS", "MAX_LAYERS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_LAYERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_LAYERS", "MAX_LAYERS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  burnerAllowed(): Address {
    let result = super.call("burnerAllowed", "burnerAllowed():(address)", []);

    return result[0].toAddress();
  }

  try_burnerAllowed(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "burnerAllowed",
      "burnerAllowed():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getLayerData(tokenId: BigInt): Pieces__getLayerDataResult {
    let result = super.call(
      "getLayerData",
      "getLayerData(uint256):((address,uint8,uint8,uint8,uint8,uint64),address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Pieces__getLayerDataResult>(
      new Pieces__getLayerDataResult(
        changetype<Pieces__getLayerDataResultValue0Struct>(result[0].toTuple()),
        result[1].toAddress()
      )
    );
  }

  try_getLayerData(
    tokenId: BigInt
  ): ethereum.CallResult<Pieces__getLayerDataResult> {
    let result = super.tryCall(
      "getLayerData",
      "getLayerData(uint256):((address,uint8,uint8,uint8,uint8,uint64),address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pieces__getLayerDataResult>(
        new Pieces__getLayerDataResult(
          changetype<Pieces__getLayerDataResultValue0Struct>(
            value[0].toTuple()
          ),
          value[1].toAddress()
        )
      )
    );
  }

  getPrice(layerIds: Array<i32>): BigInt {
    let result = super.call("getPrice", "getPrice(uint8[16]):(uint256)", [
      ethereum.Value.fromI32Array(layerIds)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(layerIds: Array<i32>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(uint8[16]):(uint256)", [
      ethereum.Value.fromI32Array(layerIds)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceAndBurn(layerIds: Array<i32>): BigInt {
    let result = super.call(
      "getPriceAndBurn",
      "getPriceAndBurn(uint16[16]):(uint256)",
      [ethereum.Value.fromI32Array(layerIds)]
    );

    return result[0].toBigInt();
  }

  try_getPriceAndBurn(layerIds: Array<i32>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceAndBurn",
      "getPriceAndBurn(uint16[16]):(uint256)",
      [ethereum.Value.fromI32Array(layerIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  layers(param0: BigInt): Pieces__layersResult {
    let result = super.call(
      "layers",
      "layers(uint256):(address,uint8,uint8,uint8,uint8,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Pieces__layersResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt()
    );
  }

  try_layers(param0: BigInt): ethereum.CallResult<Pieces__layersResult> {
    let result = super.tryCall(
      "layers",
      "layers(uint256):(address,uint8,uint8,uint8,uint8,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pieces__layersResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  render(): Address {
    let result = super.call("render", "render():(address)", []);

    return result[0].toAddress();
  }

  try_render(): ethereum.CallResult<Address> {
    let result = super.tryCall("render", "render():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(_tokenId: BigInt, _salePrice: BigInt): Pieces__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new Pieces__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    _tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<Pieces__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pieces__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  royaltyReciever(param0: BigInt): Address {
    let result = super.call(
      "royaltyReciever",
      "royaltyReciever(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_royaltyReciever(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyReciever",
      "royaltyReciever(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get _layer(): CreateTokenCall_layerStruct {
    return changetype<CreateTokenCall_layerStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get destLen(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get imageType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get xSize(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get ySize(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _name(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _royaltyReciever(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _mintTo(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _collection(): string {
    return this._call.inputValues[9].value.toString();
  }

  get _category(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }
}

export class CreateTokenCall_layerStruct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get maxSupply(): i32 {
    return this[1].toI32();
  }

  get supplyMinted(): i32 {
    return this[2].toI32();
  }

  get royalties(): i32 {
    return this[3].toI32();
  }

  get maxPerWallet(): i32 {
    return this[4].toI32();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }
}

export class GetPriceAndBurnCall extends ethereum.Call {
  get inputs(): GetPriceAndBurnCall__Inputs {
    return new GetPriceAndBurnCall__Inputs(this);
  }

  get outputs(): GetPriceAndBurnCall__Outputs {
    return new GetPriceAndBurnCall__Outputs(this);
  }
}

export class GetPriceAndBurnCall__Inputs {
  _call: GetPriceAndBurnCall;

  constructor(call: GetPriceAndBurnCall) {
    this._call = call;
  }

  get layerIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class GetPriceAndBurnCall__Outputs {
  _call: GetPriceAndBurnCall;

  constructor(call: GetPriceAndBurnCall) {
    this._call = call;
  }

  get totalPrice(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetAddArtworkPriceCall extends ethereum.Call {
  get inputs(): SetAddArtworkPriceCall__Inputs {
    return new SetAddArtworkPriceCall__Inputs(this);
  }

  get outputs(): SetAddArtworkPriceCall__Outputs {
    return new SetAddArtworkPriceCall__Outputs(this);
  }
}

export class SetAddArtworkPriceCall__Inputs {
  _call: SetAddArtworkPriceCall;

  constructor(call: SetAddArtworkPriceCall) {
    this._call = call;
  }

  get newPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAddArtworkPriceCall__Outputs {
  _call: SetAddArtworkPriceCall;

  constructor(call: SetAddArtworkPriceCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBurnerCall extends ethereum.Call {
  get inputs(): SetBurnerCall__Inputs {
    return new SetBurnerCall__Inputs(this);
  }

  get outputs(): SetBurnerCall__Outputs {
    return new SetBurnerCall__Outputs(this);
  }
}

export class SetBurnerCall__Inputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }

  get newBurner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnerCall__Outputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }
}

export class SetRenderCall extends ethereum.Call {
  get inputs(): SetRenderCall__Inputs {
    return new SetRenderCall__Inputs(this);
  }

  get outputs(): SetRenderCall__Outputs {
    return new SetRenderCall__Outputs(this);
  }
}

export class SetRenderCall__Inputs {
  _call: SetRenderCall;

  constructor(call: SetRenderCall) {
    this._call = call;
  }

  get _newRender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRenderCall__Outputs {
  _call: SetRenderCall;

  constructor(call: SetRenderCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get newuri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
