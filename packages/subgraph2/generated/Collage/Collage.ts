// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Collage___balanceDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBalance(): BigInt {
    return this.value0;
  }

  getMintedAmount(): BigInt {
    return this.value1;
  }

  getAllowListMinted(): BigInt {
    return this.value2;
  }
}

export class Collage___getTokenDataOfResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }
}

export class Collage extends ethereum.SmartContract {
  static bind(address: Address): Collage {
    return new Collage("Collage", address);
  }

  COLLAGE_PRICE(): BigInt {
    let result = super.call("COLLAGE_PRICE", "COLLAGE_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_COLLAGE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COLLAGE_PRICE",
      "COLLAGE_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LAYERS(): BigInt {
    let result = super.call("MAX_LAYERS", "MAX_LAYERS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_LAYERS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_LAYERS", "MAX_LAYERS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _balanceData(param0: Address): Collage___balanceDataResult {
    let result = super.call(
      "_balanceData",
      "_balanceData(address):(uint32,uint32,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Collage___balanceDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try__balanceData(
    param0: Address
  ): ethereum.CallResult<Collage___balanceDataResult> {
    let result = super.tryCall(
      "_balanceData",
      "_balanceData(address):(uint32,uint32,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Collage___balanceDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  _getTokenDataOf(
    tokenId_: BigInt
  ): Collage___getTokenDataOfResultValue0Struct {
    let result = super.call(
      "_getTokenDataOf",
      "_getTokenDataOf(uint256):((address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return changetype<Collage___getTokenDataOfResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try__getTokenDataOf(
    tokenId_: BigInt
  ): ethereum.CallResult<Collage___getTokenDataOfResultValue0Struct> {
    let result = super.tryCall(
      "_getTokenDataOf",
      "_getTokenDataOf(uint256):((address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Collage___getTokenDataOfResultValue0Struct>(value[0].toTuple())
    );
  }

  _tokenData(param0: BigInt): Address {
    let result = super.call("_tokenData", "_tokenData(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__tokenData(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("_tokenData", "_tokenData(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _trueOwnerOf(tokenId_: BigInt): Address {
    let result = super.call("_trueOwnerOf", "_trueOwnerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try__trueOwnerOf(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_trueOwnerOf",
      "_trueOwnerOf(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(address_: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(address_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(address_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(address_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(param0: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxBatchSize(): BigInt {
    let result = super.call("maxBatchSize", "maxBatchSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBatchSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBatchSize", "maxBatchSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintIndex(param0: BigInt): Address {
    let result = super.call("mintIndex", "mintIndex(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_mintIndex(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("mintIndex", "mintIndex(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId_: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pieces(): Address {
    let result = super.call("pieces", "pieces():(address)", []);

    return result[0].toAddress();
  }

  try_pieces(): ethereum.CallResult<Address> {
    let result = super.tryCall("pieces", "pieces():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previewCollage(
    pieceIds: Array<i32>,
    scale: Array<i32>,
    xOffsets: Array<i32>,
    yOffsets: Array<i32>
  ): string {
    let result = super.call(
      "previewCollage",
      "previewCollage(uint16[16],uint8[16],uint8[16],uint8[16]):(string)",
      [
        ethereum.Value.fromI32Array(pieceIds),
        ethereum.Value.fromI32Array(scale),
        ethereum.Value.fromI32Array(xOffsets),
        ethereum.Value.fromI32Array(yOffsets)
      ]
    );

    return result[0].toString();
  }

  try_previewCollage(
    pieceIds: Array<i32>,
    scale: Array<i32>,
    xOffsets: Array<i32>,
    yOffsets: Array<i32>
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "previewCollage",
      "previewCollage(uint16[16],uint8[16],uint8[16],uint8[16]):(string)",
      [
        ethereum.Value.fromI32Array(pieceIds),
        ethereum.Value.fromI32Array(scale),
        ethereum.Value.fromI32Array(xOffsets),
        ethereum.Value.fromI32Array(yOffsets)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  previewTokenCollage(
    tokenId: BigInt,
    layerNr: i32,
    scale: i32,
    xOffset: i32,
    yOffset: i32,
    pieceId: i32
  ): string {
    let result = super.call(
      "previewTokenCollage",
      "previewTokenCollage(uint256,uint8,uint8,uint8,uint8,uint8):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(layerNr)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(scale)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(xOffset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(yOffset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pieceId))
      ]
    );

    return result[0].toString();
  }

  try_previewTokenCollage(
    tokenId: BigInt,
    layerNr: i32,
    scale: i32,
    xOffset: i32,
    yOffset: i32,
    pieceId: i32
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "previewTokenCollage",
      "previewTokenCollage(uint256,uint8,uint8,uint8,uint8,uint8):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(layerNr)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(scale)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(xOffset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(yOffset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pieceId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  render(): Address {
    let result = super.call("render", "render():(address)", []);

    return result[0].toAddress();
  }

  try_render(): ethereum.CallResult<Address> {
    let result = super.tryCall("render", "render():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyReciever(param0: BigInt): Address {
    let result = super.call(
      "royaltyReciever",
      "royaltyReciever(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_royaltyReciever(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyReciever",
      "royaltyReciever(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startTokenId(): BigInt {
    let result = super.call("startTokenId", "startTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTokenId", "startTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(iid_: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(iid_)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(iid_: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(iid_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenIndex(): BigInt {
    let result = super.call("tokenIndex", "tokenIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenIndex", "tokenIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenInfo(param0: BigInt): Address {
    let result = super.call("tokenInfo", "tokenInfo(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokenInfo(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenInfo", "tokenInfo(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalanceOf(address_: Address): BigInt {
    let result = super.call(
      "totalBalanceOf",
      "totalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(address_)]
    );

    return result[0].toBigInt();
  }

  try_totalBalanceOf(address_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalanceOf",
      "totalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(address_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMinted(address_: Address): BigInt {
    let result = super.call("totalMinted", "totalMinted(address):(uint256)", [
      ethereum.Value.fromAddress(address_)
    ]);

    return result[0].toBigInt();
  }

  try_totalMinted(address_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMinted",
      "totalMinted(address):(uint256)",
      [ethereum.Value.fromAddress(address_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletOfOwner(address_: Address): Array<BigInt> {
    let result = super.call(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(address_)]
    );

    return result[0].toBigIntArray();
  }

  try_walletOfOwner(address_: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(address_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class AddLayerCall extends ethereum.Call {
  get inputs(): AddLayerCall__Inputs {
    return new AddLayerCall__Inputs(this);
  }

  get outputs(): AddLayerCall__Outputs {
    return new AddLayerCall__Outputs(this);
  }
}

export class AddLayerCall__Inputs {
  _call: AddLayerCall;

  constructor(call: AddLayerCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get layer(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get scale(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get xOffset(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get yOffset(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get layerId(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class AddLayerCall__Outputs {
  _call: AddLayerCall;

  constructor(call: AddLayerCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintAndBuyCall extends ethereum.Call {
  get inputs(): MintAndBuyCall__Inputs {
    return new MintAndBuyCall__Inputs(this);
  }

  get outputs(): MintAndBuyCall__Outputs {
    return new MintAndBuyCall__Outputs(this);
  }
}

export class MintAndBuyCall__Inputs {
  _call: MintAndBuyCall;

  constructor(call: MintAndBuyCall) {
    this._call = call;
  }

  get layerIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get scales(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get xOffsets(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get yOffsets(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }
}

export class MintAndBuyCall__Outputs {
  _call: MintAndBuyCall;

  constructor(call: MintAndBuyCall) {
    this._call = call;
  }
}

export class MintAndSetCall extends ethereum.Call {
  get inputs(): MintAndSetCall__Inputs {
    return new MintAndSetCall__Inputs(this);
  }

  get outputs(): MintAndSetCall__Outputs {
    return new MintAndSetCall__Outputs(this);
  }
}

export class MintAndSetCall__Inputs {
  _call: MintAndSetCall;

  constructor(call: MintAndSetCall) {
    this._call = call;
  }

  get layerIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get scales(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get xOffsets(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get yOffsets(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }
}

export class MintAndSetCall__Outputs {
  _call: MintAndSetCall;

  constructor(call: MintAndSetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCollagePriceCall extends ethereum.Call {
  get inputs(): SetCollagePriceCall__Inputs {
    return new SetCollagePriceCall__Inputs(this);
  }

  get outputs(): SetCollagePriceCall__Outputs {
    return new SetCollagePriceCall__Outputs(this);
  }
}

export class SetCollagePriceCall__Inputs {
  _call: SetCollagePriceCall;

  constructor(call: SetCollagePriceCall) {
    this._call = call;
  }

  get _newCollagePrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCollagePriceCall__Outputs {
  _call: SetCollagePriceCall;

  constructor(call: SetCollagePriceCall) {
    this._call = call;
  }
}

export class SetPiecesCall extends ethereum.Call {
  get inputs(): SetPiecesCall__Inputs {
    return new SetPiecesCall__Inputs(this);
  }

  get outputs(): SetPiecesCall__Outputs {
    return new SetPiecesCall__Outputs(this);
  }
}

export class SetPiecesCall__Inputs {
  _call: SetPiecesCall;

  constructor(call: SetPiecesCall) {
    this._call = call;
  }

  get _newPieces(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPiecesCall__Outputs {
  _call: SetPiecesCall;

  constructor(call: SetPiecesCall) {
    this._call = call;
  }
}

export class SetRenderCall extends ethereum.Call {
  get inputs(): SetRenderCall__Inputs {
    return new SetRenderCall__Inputs(this);
  }

  get outputs(): SetRenderCall__Outputs {
    return new SetRenderCall__Outputs(this);
  }
}

export class SetRenderCall__Inputs {
  _call: SetRenderCall;

  constructor(call: SetRenderCall) {
    this._call = call;
  }

  get _newRender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRenderCall__Outputs {
  _call: SetRenderCall;

  constructor(call: SetRenderCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
